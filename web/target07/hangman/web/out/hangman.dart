// Auto-generated from hangman.html.
// DO NOT EDIT.

library hangman_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;


// Original code
String answer = 'ambidextrous';

List<String> characters   = answer.splitChars();
List<String> hyphens      = answer.replaceAll(new RegExp('.'), '-').splitChars();
List<String> wrongletters = new List();
List<List> hangmandisplay;

String guessedletter = '';
bool dead = false;
bool won = false;

void main() {
  setupHangmanGrid();
}

void checkit() {
  const int maxwrong = 7;
  if (characters.contains(guessedletter)) {  // guess is correct
    revealletters();
    if (!hyphens.contains('-')) {
      won = true;
    }
  } else {                                   // guess is wrong
    revealnewbodypart();                                  
    wrongletters.add(guessedletter);
    if (wrongletters.length == maxwrong) {
      dead = true;
    }
  }
  guessedletter = '';
}

void revealletters() {
  for (int i = 0; i < characters.length; i++) {
    if (characters[i] == guessedletter) {
      hyphens[i] = guessedletter;
    }
  }
}

void revealnewbodypart() {
  // triplets: row, col, character for body part
  var deadmanparts = [ [1,4,'0'],   /* head */
                       [2,3,'\/'],  /* left arm */
                       [2,4,'\|'],  /* upper body */
                       [2,5, '\\'], /* right arm */
                       [3,4, '\|'], /* lower body */
                       [4,3, '\/'], /* left leg */
                       [4,5,'\\']   /* right leg */
                     ];

  var row = deadmanparts[wrongletters.length][0];
  var col = deadmanparts[wrongletters.length][1];
  hangmandisplay[row][col] = deadmanparts[wrongletters.length][2];
}

void setupHangmanGrid()
{
  var gallows = [ '+---+  ',
                  '\|      ',
                  '\|      ',
                  '\|      ',
                  '\|      ' ];
  hangmandisplay = new List(gallows.length);
  
  for (int i = 0; i < gallows.length; i++) {
    List<String> row = gallows[i].splitChars();
    hangmandisplay[i] = row;
  }
}


// Additional generated code
void init_autogenerated() {
  var _root = autogenerated.document.body;
  var __e11, __e12, __e13, __e3, __e5, __hangman, __tableContainer;

  var __t = new autogenerated.Template(_root);
  __tableContainer = _root.query('#table-container');
  __e3 = __tableContainer.query('#__e-3');
  __t.loop(__e3, () => (hangmandisplay), (row, __t) {
    var __e2;
    __e2 = new autogenerated.TableRowElement();
    __t.loop(__e2, () => (row), (cell, __t) {
      var __e1;
      __e1 = new autogenerated.Element.tag('td');
      var __binding0 = __t.contentBind(() => (cell));
      __e1.nodes.add(__binding0);
      __t.addAll([
        new autogenerated.Text('\n            '),
        __e1,
        new autogenerated.Text('\n          ')
      ]);
    }, isTemplateElement: false);
    __t.addAll([
      new autogenerated.Text('\n          '),
      __e2,
      new autogenerated.Text('\n        ')
    ]);
  }, isTemplateElement: false);
  __hangman = _root.query('#hangman');
  __e5 = __hangman.query('#__e-5');
  __t.loop(__e5, () => (hyphens), (character, __t) {
    
    var __binding4 = __t.contentBind(() => (character));
    __t.addAll([
      new autogenerated.Text(' '),
      __binding4,
      new autogenerated.Text(' ')
    ]);
  });
  __e11 = _root.query('#__e-11');
  __t.conditional(__e11, () => (!dead && !won), (__t) {
    var __e10, __e6, __e7, __e8, __wrong;
    __e6 = new autogenerated.InputElement();
    __t.listen(__e6.on.input, ($event) { guessedletter = __e6.value; });
    __t.listen(__e6.on.keyUp, ($event) { checkit(); });
    __t.oneWayBind(() => (guessedletter), (e) { __e6.value = e; }, false);
    __e8 = new autogenerated.Element.html('<p>\n            <template id="__e-7" style="display:none"></template>\n          </p>');
    __e7 = __e8.query('#__e-7');
    __t.conditional(__e7, () => (wrongletters.length != 0), (__t) {
      
      __t.add(new autogenerated.Text(' Sorry! The word contains no: '));
    });
    
    __wrong = new autogenerated.Element.html('<p id="wrong">\n            <template id="__e-10" style="display:none"></template>\n          </p>');
    __e10 = __wrong.query('#__e-10');
    __t.loop(__e10, () => (wrongletters), (usedchars, __t) {
      
      var __binding9 = __t.contentBind(() => (usedchars));
      __t.addAll([
        new autogenerated.Text(' '),
        __binding9,
        new autogenerated.Text(' ')
      ]);
    });
    __t.addAll([
      new autogenerated.Text('\n          Guess a letter...\n          '),
      __e6,
      new autogenerated.Text('\n          '),
      __e8,
      new autogenerated.Text('\n          '),
      __wrong,
      new autogenerated.Text('\n        ')
    ]);
  });
  
  __e12 = _root.query('#__e-12');
  __t.conditional(__e12, () => (dead), (__t) {
    
    __t.add(new autogenerated.Text(' You\'re dead! '));
  });
  
  __e13 = _root.query('#__e-13');
  __t.conditional(__e13, () => (won), (__t) {
    
    __t.add(new autogenerated.Text(' You Win! '));
  });
  

  __t.create();
  __t.insert();
}
